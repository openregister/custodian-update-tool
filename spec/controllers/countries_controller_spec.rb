require 'rails_helper'
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CountriesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Country. As you add validations to Country, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:country).attributes
  }

  describe "GET #index" do
    it "assigns all countries as @countries" do
      country = Country.create! valid_attributes
      get :index, params: {}
      expect(assigns(:countries)).to eq([country])
    end
  end

  describe "GET #show" do
    it "assigns the requested country as @country" do
      country = Country.create! valid_attributes
      get :show, params: {id: country.to_param}
      expect(assigns(:country)).to eq(country)
    end
  end

  describe "GET #edit" do
    it "assigns the requested country as @country" do
      country = Country.create! valid_attributes
      params = {id: country.to_param}
      get :edit, params: params
      ModelWizard.new(country, session, params).start
      expect(assigns(:country)).to eq(country)
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested country" do
        country = Country.create! valid_attributes
        get :edit, params: {id: country.to_param}
        put :update, params: {id: country.to_param, country: { start_date: "2017-01-01" }}
        expect(assigns(:country).reload.start_date).to eq("2017-01-01")
      end

      it "assigns the requested country as @country" do
        country = Country.create! valid_attributes
        get :edit, params: {id: country.to_param}
        put :update, params: {id: country.to_param, country: valid_attributes}
        expect(assigns(:country)).to eq(country)
      end

      it "redirects to the country" do
        country = Country.create! valid_attributes
        get :edit, params: {id: country.to_param}
        put :update, params: {id: country.to_param, country: valid_attributes}
        expect(response).to redirect_to success_country_path(country)
      end
    end
  end

end
