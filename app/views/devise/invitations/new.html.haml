= content_for :page_title, t('devise.invitations.new.header')
= devise_error_messages!

- if params[:role] == 'admin'
  = link_to 'Back', admin_path, class: 'link-back'

  %h1.heading-large Add a new admin
  .panel.panel-border-narrow
    %p.list-title All Admin users can:
    %ul.list.list-bullet
      %li Manage Admin team
      %li Manage custodian access
      %li Update records
      %li Submit updates for review
      %li Approve and publish updates to records

- if params[:role] == 'custodian'
  = link_to 'Back', custodians_path, class: 'link-back'

  %h1.heading-large Add a new custodian
  .panel.panel-border-narrow
    %p.list-title Custodians are responsible for registers and they can:
    %ul.list.list-bullet
      %li Manage team members
      %li Update records
      %li Submit updates for review
      %li Approve and publish updates to records

- if params[:team_id]
  = link_to 'Back', team_path(params[:team_id]), class: 'link-back'

  %h1.heading-large Add a new team member
- has_unassigned_registers = (Register.all.map(&:key) - (registers_by_name)).present?

- if has_unassigned_registers
  = form_for resource, url: invitation_path(resource_name), html: { method: :post } do |f|

    - resource.class.invite_key_fields.each do |field|
      .grid-row
        .column-one-half
          = f.text_field field, class: 'form-control-full-width', 'required': true, 'type': (field == :email ? 'email': nil)
    - if params[:role] == 'admin'
      = f.hidden_field :admin, value: true
    - else
      - if current_user.admin?
        .form-group
          = f.hidden_field :role, value: params[:role]
          - if params[:role] == 'custodian'
            = f.label :registers, class: "form-label"
            = f.nested_fields_for :teams, f.object.teams.new do |team|
              .grid-row.form-group
                .column-one-half
                  = team.select :registers, registers_by_name.collect{ |r| [prepare_register_name(r), r]}.reject {|register|  Register.all.collect{|stored_register| stored_register.key unless stored_register.team_id.nil?}.include? register[1]{|register| Register.all.collect{|stored_register| stored_register.key unless stored_register.team_id.nil?}.include? register[1]}}, { include_blank: "Select Register" }, { class: "form-control", required: true }
                .column-one-half
                  = team.remove_nested_fields_link 'Remove register'

            = f.add_nested_fields_link :teams, 'Add register'

      - else
        = f.fields_for :team_members, TeamMember.new do |tm|
          = tm.hidden_field :team_id, value: params[:team_id]
          %h3.heading-small Select permissions
          .form-group
            %fieldset
              %legend.visually-hidden= t('views.users.role')
              .multiple-choice
                = tm.radio_button :role, "advanced", 'required': true
                = tm.label :role, "Advanced", value: "advanced"
              .user__permissions
                %p.list-title Advanced can:
                %ul.list.list-bullet
                  %li Manage team members
                  %li Update records
                  %li Submit updates for review
                  %li Approve and publish updates to records
              .multiple-choice
                = tm.radio_button :role, "basic"
                = tm.label :role, "Basic", value: "basic"
              .user__permissions
                %p.list-title Basic can:
                %ul.list.list-bullet
                  %li Update records
                  %li Submit updates for review

    .form-group
      = f.submit "Send invite", class: 'button'
- else
  = content_tag(:h3, 'All registers currently have a custodian assigned.', class: ['heading-small'])

- content_for :javascript do
  :javascript
    $(function() {
      if ($('.nested_fields').length < 2) {
        $('.remove_nested_fields_link').hide()
      }
    })
